#!/usr/bin/env python3
import argparse
import sys

from cimessages import MessageFormat, reporter
from helpers import get_portal_url
from params import Params
from portal_api import PortalAPI
from post_scan import get_analysis_url, get_scan_status, export_analysis_report, DEFAULT_ATTEMPT_TIMEOUT_MIN
from validators import (
    validate_folder,
    validate_file,
    validate_report_formats,
)


def main() -> int:
    parser: argparse.ArgumentParser = build_argument_parser()

    params = Params(**vars(parser.parse_args()))
    validate_params(params)

    reporter.set_format(params.message_reporter)

    scanner = PortalAPI(params)

    with reporter.progress_block("Scanning version"):
        with open(params.file_path, "rb") as file:
            scanner.scan_version(file)

            if params.submit_only:
                reporter.info("submit-only flag present, skip waiting for analysis result")
                reporter.scan_result(True)
                return 0

    with reporter.progress_block("Fetching analysis status"):
        scan_status = get_scan_status(scanner, params.timeout)
        passed_analysis = scan_status == "pass"
        reporter.scan_result(passed_analysis)

    with reporter.progress_block("Getting the report URL"):
        analysis_url = get_analysis_url(scanner)
        portal_url = get_portal_url(params.rl_portal_server)
        report_url = f"{portal_url}/{analysis_url}"
        reporter.with_prefix("Report URL", report_url)

    if params.report_format and params.report_path:
        with reporter.progress_block("Exporting analysis report"):
            export_analysis_report(scanner, params.report_format, params.report_path)

    return 0 if passed_analysis else 1


def validate_params(params: Params):
    validate_file(params.file_path)
    validate_folder(params.report_path, params.report_format)
    validate_report_formats(params.report_format)


def build_argument_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        prog="rl-scan",
        description="ReversingLabs: rl-scanner-cloud\n\n"
        "Extended product documentation is available at: https://docs.secure.software",
        epilog="Environment variables:\n"
        "  RLPORTAL_ACCESS_TOKEN    - Token used to access to the secure.software portal\n"
        "  RLSECURE_PROXY_SERVER    - Server URL for local proxy\n"
        "  RLSECURE_PROXY_PORT      - Network port for local proxy\n"
        "  RLSECURE_PROXY_USER      - User name for proxy authentication\n"
        "  RLSECURE_PROXY_PASSWORD  - Password for proxy authentication\n",
    )

    parser.add_argument(
        "--rl-portal-server",
        required=True,
        help="Portal that will do the scanning",
    )

    parser.add_argument(
        "--rl-portal-org",
        required=True,
    )

    parser.add_argument(
        "--rl-portal-group",
        required=True,
    )

    parser.add_argument(
        "--purl",
        required=True,
        help="Package URL used for the scan (format [pkg:namespace]/<project></package><@version>)",
    )

    parser.add_argument(
        "--file-path",
        required=True,
        help="Path to the file you want to scan",
    )

    parser.add_argument(
        "--filename",
        help="Defaults to the name of the selected file",
    )

    parser.add_argument(
        "--replace",
        action="store_true",
        help="Replace the existing package version within the package, or reproducible build if build type is repro",
    )

    parser.add_argument(
        "--force",
        action="store_true",
        help="If a package has the maximum number of versions, then the oldest version of the package will be "
        "deleted to make space for the version you're uploading",
    )

    parser.add_argument(
        "--submit-only",
        action="store_true",
        help="Scan the file, and continue regardless of the scan outcome",
    )

    parser.add_argument(
        "--diff-with",
        help="Selected analyzed package version to compare against the uploaded version",
    )

    parser.add_argument(
        "--message-reporter",
        choices=list(MessageFormat),
        type=MessageFormat,
        default=MessageFormat.TEXT,
        help="Processing status message format",
    )

    parser.add_argument(
        "--timeout",
        type=int,
        default=DEFAULT_ATTEMPT_TIMEOUT_MIN,
        help="Amount of time user is willing to wait for analysis before failing. Defaults to 20 minutes",
    )

    parser.add_argument(
        "--report-format",
        type=str,
        help="A comma-separated list of report formats to generate. Supported values: "
        "cyclonedx, sarif, spdx, rl-json, rl-checks, all",
    )

    parser.add_argument(
        "--report-path",
        help="Path to a directory where the selected reports will be saved",
    )

    return parser


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
